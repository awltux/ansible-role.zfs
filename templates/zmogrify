#!/bin/bash -e
# zmogrify - Re-create the /boot and grub.cfg files when kernel is updated.
# Kernel changes auto-run this from /etc/kernel/postinst.d/zmogrify
# Runs:
#   * dkms rebuild of spl and zfs kernel modules.
#   * dracut to re-create /boot/vmlinuz* kernel images.
#   * grub2-mkconfig to make grub use the new files in /boot.

mount_boot_efi() {
  # Mount efi boot partition using entry in /etc/fstab
  if mount | grep "/boot/efi"; then
    # Probably a development oversight
    #  make sure we mount from /etc/fstab
    umount /boot/efi
  fi
  mount /boot/efi

  # Make sure we unmount it - even if there are errors
  trap umount_boot_efi EXIT
}

umount_boot_efi() {
  # Finished with efi parition
  umount /boot/efi
}

post_kernel_update_fixes() {
  # After an update, but before a reboot, the running 
  # kernel version can be older than the installed kernel version
  
  local installedKernel
  local runningKernel
  local hardwarePlatform
  local rpmDist
  local zver 

  rpmDist=$(rpm -E %dist)
  hardwarePlatform=$(uname -i)
  # list all the boot kernels for the current harware Platform| 
  # strip off the .el7.x86_64 for | 
  # ascii sort using (V)ersion strings | 
  # last in list is highest version | 
  # cut out the version number
  installedKernel=$( 
    ls -1 /boot/vmlinuz*${hardwarePlatform} | 
	sed "s/${rpmDist}\.${hardwarePlatform}//" | 
	sort -V | 
	tail -1 | 
	cut -d'-' -f2-
  )
  
  # strip off the .el7.x86_64 for comparison to work 
  runningKernel=$( 
    uname -r | 
	sed "s/${rpmDist}\.${hardwarePlatform}//" 
  )
  
  if [[ -z "${installedKernel}" ]] || [[ -z "${runningKernel}" ]]; then
    echo "Unable to find Kernel Versions:"
    echo "    installedKernel=${installedKernel}"
    echo "      runningKernel=${runningKernel}"
    exit 1
  fi

  if [[ "${installedKernel}" != "${runningKernel}" ]]; then
    echo "Kernel Versions dont match:"
    echo "    installedKernel=${installedKernel}"
    echo "      runningKernel=${runningKernel}"
    echo "REBOOT NOW!"
    exit 1
  fi

  local installedKernelString=${installedKernel}${rpmDist}.${hardwarePlatform}

  # rebuild the zfs and spl modules need rebuilt
  zver=$(rpm -q zfs | cut -d'-' -f2)
  if [[ -z "${zver}" ]] || [[ "${zver}" =~ [0-9\.]\+ ]]; then
    echo "Invalid zfs version extracted from rpm: ${zver}"
    exit 1
  fi 
  dkms install -m spl -v ${zver} -k ${installedKernelString}
  dkms install -m zfs -v ${zver} -k ${installedKernelString}

  # Recreate the /boot/initramfs for the new kernel
  # set -x: Display dracut command
  # set -e: fail on non-zero rc
  sh -x -e -c "/usr/bin/dracut -fv --kver ${installedKernelString}"

  if ! [[ -e /boot/initramfs-${installedKernelString}.img ]]; then
    echo "Missing file: /boot/initramfs-${installedKernelString}.img"
    exit 1
  fi
  
  # Does new initramfs contain the zfs kernel module?
  if ! (lsinitrd -k ${installedKernelString} | grep "zfs.ko"); then
    echo "Installed initramfs doesnt contain zfs.ko"
    exit 1
  fi

  # Need the /boot/efi mounted for whats next
  mount_boot_efi

  # Copy any updated zfs grub modules into efi boot partition
  mkdir -p /boot/efi/EFI/{{ ansible_distribution|lower }}/x86_64-efi
  cp -a /usr/lib/grub/x86_64-efi/* /boot/efi/EFI/{{ ansible_distribution|lower }}/x86_64-efi

  # Rebuild the grub config
  grub2-mkconfig -o /boot/efi/EFI/{{ ansible_distribution|lower }}/grub.cfg

  # Set grub boot menu item 0 as the default
  grubby --set-default-index 0

  # Does the created grub.cfg contain the new kernel
  if ! grep "${installedKernel}" /boot/efi/EFI/{{ ansible_distribution|lower }}/grub.cfg >/dev/null; then
    echo "Installed Kernel not mentioned in grub.cfg"
    exit 1
  fi

  # The fat32 filesystem used by a GPT boot partition doesnt support symbolic links; just copy it
  # \cp means ignore any alias e.g. cp -i which would prompt for replace
  \cp -u /boot/grub2/grubenv /boot/efi/EFI/{{ ansible_distribution|lower }}/

  # SYS_EXIT will trigger trap to call umount_boot_efi()
}

post_kernel_update_fixes

